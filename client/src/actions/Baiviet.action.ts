"use server";

import prisma from "@/lib/prisma";
import { LayUserBoiId } from "./user.action";
import { revalidatePath } from "next/cache";
import { auth } from "@clerk/nextjs/server";

export async function TaoBaiViet(
  noidung: string,
  media: { url: string; loai: "image" | "video" }[],
  chudeID: number,
  congkhai: boolean
) {
  try {
    const nguoidungId = await LayUserBoiId();
    if (!nguoidungId) return { success: false, message: "Ch∆∞a ƒëƒÉng nh·∫≠p" };

    const baiviet = await prisma.baiviet.create({
      data: {
        noidung,
        chudeID,
        congkhai,
        tacgiaID: nguoidungId,
        phuongtien: {
          create: media.map((m) => ({
            url: m.url,
            loai: m.loai,
          })),
        },
      },
      include: {
        phuongtien: true,
      },
    });

    revalidatePath("/");
    return { success: true, baiviet };
  } catch (error: any) {
    console.error("üî• L·ªói khi t·∫°o b√†i vi·∫øt:", error.message);
    return { success: false, error: error.message };
  }
}





export async function getBaiViet() {
  try {
    const { userId: clerkId } = await auth();

    // Get current user if logged in
    const currentUser = clerkId
      ? await prisma.user.findUnique({
          where: { clerkId },
        })
      : null;

    // Fetch all posts with related data
    const baivietList = await prisma.baiviet.findMany({
      orderBy: {
        ngaytao: "desc",
      },
       where: {
        OR: [
          { congkhai: true }, // b√†i c√¥ng khai th√¨ ai c≈©ng xem ƒë∆∞·ª£c
          { AND: [{ congkhai: false }, { tacgiaID: currentUser?.id }] }, // b√†i ri√™ng t∆∞ ch·ªâ user t·∫°o m·ªõi xem ƒë∆∞·ª£c
        ],
      },
      include: {
        tacgia: {
          select: {
            id: true,
            ten: true,
            username: true,
            hinhanh: true,
          },
        },
        chude: true,
        binhluan: {
          select: {
            id: true,
            noidung: true,
            ngaytao: true,
            tacgia: {
              select: {
                id:true,
                ten: true,
                hinhanh: true,
                ngaytao: true
              },
            },
          },
        },
        yeuthich: {
          select: {
            id: true,
            nguoidungID: true,
          },
        },
        phuongtien: true, 
        _count: {
          select: {
            yeuthich: true,
            binhluan: true,
          },
        },
      },
    });

    // Add `daThich` field to each post indicating if the current user liked it
    const data = baivietList.map((bv) => ({
      ...bv,
      daThich: currentUser
        ? bv.yeuthich.some((yt) => yt.nguoidungID === currentUser.id)
        : false,
    }));

    return data;
  } catch (error: any) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch b√†i vi·∫øt:", error.message);
    return []; // Ho·∫∑c return { success: false, error: error.message } n·∫øu b·∫°n mu·ªën ƒë·ªãnh d·∫°ng r√µ r√†ng h∆°n
  }
}

export async function toggleLike(baivietID: number) {
  try {
    const nguoidungId = await LayUserBoiId();
    if (!nguoidungId) return { success: false, message: "Ch∆∞a ƒëƒÉng nh·∫≠p" };

    if (!baivietID) return { success: false, message: "ID b√†i vi·∫øt kh√¥ng h·ª£p l·ªá" };

    // Ki·ªÉm tra n·∫øu ƒë√£ y√™u th√≠ch
    const existingLike = await prisma.yeuthichBaiviet.findUnique({
      where: {
        nguoidungID_baivietID: {
          nguoidungID: nguoidungId,
          baivietID: baivietID,
        },
      },
    });

    // L·∫•y th√¥ng tin b√†i vi·∫øt ƒë·ªÉ t·∫°o th√¥ng b√°o n·∫øu c·∫ßn
    const baiviet = await prisma.baiviet.findUnique({
      where: { id: baivietID },
      select: { tacgiaID: true },
    });

    if (!baiviet) throw new Error("B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i");

    if (existingLike) {
      await prisma.$transaction([
        prisma.thongbao.deleteMany({
          where: {
            yeuthichBaiID: existingLike.id,
          },
        }),
        prisma.yeuthichBaiviet.delete({
          where: {
            nguoidungID_baivietID: {
              nguoidungID: nguoidungId,
              baivietID: baivietID,
            },
          },
        }),
      ]);
    } else {
      const newLike = await prisma.yeuthichBaiviet.create({
        data: {
          nguoidungID: nguoidungId,
          baivietID: baivietID,
        },
      });

      if (baiviet.tacgiaID !== nguoidungId) {
        await prisma.thongbao.create({
          data: {
            loai: "thich",
            nguoidungID: baiviet.tacgiaID,
            nguoitaoID: nguoidungId,
            baivietID: baivietID,
            yeuthichBaiID: newLike.id,
          },
        });
      }
    }

    revalidatePath("/");
    return { success: true };
  } catch (error: any) {
    console.error("‚ùå L·ªói khi x·ª≠ l√Ω th√≠ch/b·ªè th√≠ch:", error.message);
    return { success: false, error: "Th·∫•t b·∫°i trong toggle like" };
  }
}



export async function TaoBinhluan(baivietID: number, noidung: string) {
  try {
    const nguoidungID = await LayUserBoiId();
    if (!nguoidungID) return;
    if (!noidung.trim()) throw new Error("Ch∆∞a nh·∫≠p n·ªôi dung");

    const baiviet = await prisma.baiviet.findUnique({
      where: { id: baivietID },
      select: { tacgiaID: true },
    });

    if (!baiviet) throw new Error("Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt");

    const binhluan = await prisma.$transaction(async (tx) => {
      const binhluanMoi = await tx.binhluan.create({
        data: {
          noidung,
          tacgiaID: nguoidungID,
          baivietID: baivietID,
        },
      });

      if (baiviet.tacgiaID !== nguoidungID) {
        await tx.thongbao.create({
          data: {
            loai: "binhluan",
            nguoidungID: baiviet.tacgiaID,
            nguoitaoID: nguoidungID,
            baivietID: baivietID,
            binhluanID: binhluanMoi.id,
          },
        });
      }

      return binhluanMoi;
    });

    revalidatePath(`/baiviet/${baivietID}`);
    return { success: true, binhluan };
  } catch (error: any) {
    console.error(" Th·∫•t b·∫°i khi t·∫°o b√¨nh lu·∫≠n:", error.message);
    return { success: false, error: error.message || "Th·∫•t b·∫°i khi t·∫°o b√¨nh lu·∫≠n" };
  }
}
export async function XoaBaiviet(baivietID: number) {
  try {
    const nguoidungID = await LayUserBoiId();

    const baiviet = await prisma.baiviet.findUnique({
      where: { id: baivietID },
      select: { tacgiaID: true },
    });

    if (!baiviet) throw new Error("Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt");
    if (baiviet.tacgiaID !== nguoidungID) throw new Error("Kh√¥ng c√≥ quy·ªÅn x√≥a b√†i vi·∫øt n√†y");

    // Xo√° d·ªØ li·ªáu li√™n quan
    await prisma.$transaction([
      // X√≥a th√¥ng b√°o li√™n quan ƒë·∫øn b√¨nh lu·∫≠n c·ªßa b√†i vi·∫øt
      prisma.thongbao.deleteMany({
        where: {
          binhluan: {
            baivietID: baivietID,
          },
        },
      }),
      // X√≥a th√¥ng b√°o li√™n quan ƒë·∫øn like c·ªßa b√†i vi·∫øt
      prisma.thongbao.deleteMany({
        where: {
          baivietID: baivietID,
        },
      }),
      // X√≥a b√¨nh lu·∫≠n c·ªßa b√†i vi·∫øt
      prisma.binhluan.deleteMany({
        where: {
          baivietID: baivietID,
        },
      }),
      // X√≥a like c·ªßa b√†i vi·∫øt
      prisma.yeuthichBaiviet.deleteMany({
        where: {
          baivietID: baivietID,
        },
      }),
      // Cu·ªëi c√πng, x√≥a b√†i vi·∫øt
      prisma.baiviet.delete({
        where: { id: baivietID },
      }),
    ]);

    revalidatePath("/");
    return { success: true };
  } catch (error: any) {
    console.error("‚ùå Th·∫•t b·∫°i khi x√≥a b√†i vi·∫øt:", error.message);
    return { success: false, error: error.message || "Th·∫•t b·∫°i khi x√≥a b√†i vi·∫øt" };
  }
}


export async function XoaBinhluan(binhluanID: number) {
  try {
    const nguoidungID = await LayUserBoiId();
    if (!nguoidungID) return { success: false, message: "Ch∆∞a ƒëƒÉng nh·∫≠p" };

    // L·∫•y b√¨nh lu·∫≠n k√®m b√†i vi·∫øt ƒë·ªÉ ki·ªÉm tra quy·ªÅn
    const binhluan = await prisma.binhluan.findUnique({
      where: { id: binhluanID },
      select: {
        tacgiaID: true,
        baiviet: {
          select: { tacgiaID: true, id: true },
        },
      },
    });

    if (!binhluan) return { success: false, message: "B√¨nh lu·∫≠n kh√¥ng t·ªìn t·∫°i" };

    // Ki·ªÉm tra quy·ªÅn: ch·ªâ t√°c gi·∫£ b√¨nh lu·∫≠n ho·∫∑c t√°c gi·∫£ b√†i vi·∫øt m·ªõi ƒë∆∞·ª£c x√≥a
    if (
      binhluan.tacgiaID !== nguoidungID &&
      (!binhluan.baiviet || binhluan.baiviet.tacgiaID !== nguoidungID)
    ) {
      return { success: false, message: "Kh√¥ng c√≥ quy·ªÅn x√≥a b√¨nh lu·∫≠n n√†y" };
    }

    // X√≥a th√¥ng b√°o li√™n quan ƒë·∫øn b√¨nh lu·∫≠n n√†y (n·∫øu c√≥)
    await prisma.$transaction([
      prisma.thongbao.deleteMany({
        where: { binhluanID: binhluanID },
      }),
      prisma.binhluan.delete({
        where: { id: binhluanID },
      }),
    ]);

    // C·∫≠p nh·∫≠t l·∫°i UI tr√™n path b√†i vi·∫øt
    if (binhluan.baiviet) {
      revalidatePath(`/baiviet/${binhluan.baiviet.id}`);
    }

    return { success: true };
  } catch (error: any) {
    console.error("‚ùå L·ªói khi x√≥a b√¨nh lu·∫≠n:", error.message);
    return { success: false, message: error.message || "L·ªói khi x√≥a b√¨nh lu·∫≠n" };
  }
}


export async function CapNhatTrangThaiCongKhai(id: number, congkhai: boolean) {
  const nguoidungID = await LayUserBoiId();
  if (!nguoidungID) return { success: false, message: "Ch∆∞a ƒëƒÉng nh·∫≠p" };

  const baiviet = await prisma.baiviet.findUnique({
    where: { id },
    select: { tacgiaID: true },
  });

  if (!baiviet || baiviet.tacgiaID !== nguoidungID) {
    return { success: false, message: "Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t b√†i vi·∫øt n√†y" };
  }

  await prisma.baiviet.update({
    where: { id },
    data: { congkhai },
  });

  revalidatePath("/"); 

  return { success: true };
}



export async function getBaivietById(id: number) {
  try {
    const { userId: clerkId } = await auth();

    // L·∫•y user hi·ªán t·∫°i n·∫øu ƒëƒÉng nh·∫≠p
    const currentUser = clerkId
      ? await prisma.user.findUnique({
          where: { clerkId },
        })
      : null;

    // L·∫•y 1 b√†i vi·∫øt theo id v·ªõi ƒëi·ªÅu ki·ªán: 
    // - n·∫øu b√†i c√¥ng khai th√¨ ai c≈©ng xem ƒë∆∞·ª£c
    // - n·∫øu b√†i ri√™ng t∆∞ th√¨ ch·ªâ user t·∫°o m·ªõi xem ƒë∆∞·ª£c
    const baiviet = await prisma.baiviet.findFirst({
      where: {
        id,
        OR: [
          { congkhai: true },
          { AND: [{ congkhai: false }, { tacgiaID: currentUser?.id }] },
        ],
      },
      include: {
        tacgia: {
          select: {
            id: true,
            ten: true,
            username: true,
            hinhanh: true,
            ngaytao: true,
          },
        },
        chude: true,
        binhluan: {
          select: {
            id: true,
            noidung: true,
            ngaytao: true,
            tacgia: {
              select: {
                id: true,
                ten: true,
                hinhanh: true,
                ngaytao: true,
              },
            },
          },
        },
        yeuthich: {
          select: {
            id: true,
            nguoidungID: true,
          },
        },
        phuongtien: true,
        _count: {
          select: {
            yeuthich: true,
            binhluan: true,
          },
        },
      },
    });

    if (!baiviet) return null;

    const daThich = currentUser
      ? baiviet.yeuthich.some((yt) => yt.nguoidungID === currentUser.id)
      : false;

    return {
      ...baiviet,
      daThich,
    };
  } catch (error: any) {
    console.error("‚ùå L·ªói khi l·∫•y b√†i vi·∫øt theo id:", error.message);
    return null;
  }
}

